import telebot
from telebot import types
from tokens import TELEGRAM_BOT_TOKEN 
import os
import json
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

user_story_maker_data = {}
DATA_FILE = 'tasks.json'


#–ú–∞—Ä–∫–∞–ø—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä:

def main_menu_markup():
        keyboard = types.InlineKeyboardMarkup() #–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –≤–∏–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏—Å–ø–ª—å–∑–æ–≤–∞—Ç—å
        calculator_button = types.InlineKeyboardButton(text='üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', callback_data='calculator') 
        keyboard.add(calculator_button) #–¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        repeater_button= types.InlineKeyboardButton(text='üîÅ –ü–æ–≤—Ç–æ—Ä—è–ª–∫–∞', callback_data='repeater')
        keyboard.add(repeater_button)
        story_maker_button = types.InlineKeyboardButton(text='üìñ –°–æ—á–∏–Ω—è–ª–∫–∞ –∏—Å—Ç–æ—Ä–∏–π', callback_data='story_maker')
        keyboard.add(story_maker_button) 
        notes_button = types.InlineKeyboardButton(text="üìú –ó–∞–º–µ—Ç–∫–∏", callback_data="notes")
        keyboard.add(notes_button)
        return keyboard


def notes_markup():
            markup = types.InlineKeyboardMarkup()
            btn1 = types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_note")
            markup.add(btn1)
            btn2 = types.InlineKeyboardButton("üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", callback_data="note_list")
            markup.add(btn2)
            btn3 = types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="delete_note")
            markup.add(btn3)
            btn4 = types.InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏", callback_data="complete_note")
            markup.add(btn4)
            btn5 = types.InlineKeyboardButton("‚Ü© –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
            markup.add(btn5)
            return markup

@bot.message_handler(content_types=["text"])
def get_text_messages(message):
    if message.text.lower() == "/start":
        choose_modules(message)
    else:
        bot.send_message(message.chat.id, "–¢—ã —á—ë –Ω–µ—Å–µ—à—å –º–∞–±–æ–π, –Ω–∞–ø–∏—à–∏ '/start'")

def choose_modules(message):
        bot.send_message(message.from_user.id, text='–í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:', reply_markup=main_menu_markup())


@bot.callback_query_handler(func=lambda call: True) #–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
def callback_worker(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    if call.data == "calculator": 
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ:")
        bot.register_next_step_handler(msg, get_first_operand)
    elif call.data == "repeater":       
        bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏ '—Å—Ç–æ–ø' —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–∏–∫–ª")
        msg = bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏ —á—Ç–æ —Ç–µ–±–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å (—Ç–µ–∫—Å—Ç, –≥–∏—Ñ–∫–∞, —Ñ–æ—Ç–æ –∏ —Ç.–ø)")
        bot.register_next_step_handler(msg, repeat)
    elif call.data == "story_maker":
        msg = bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
        bot.register_next_step_handler(msg, story_maker)
        user_story_maker_data[msg.chat.id] = {"step": "name"}
    elif call.data == "notes":
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ:",
                reply_markup=notes_markup())
    elif call.data == "back_to_menu":
                bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="–í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:'",
                reply_markup=main_menu_markup())
    elif call.data == "add_note":
            msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:")
            bot.register_next_step_handler(msg, process_add_step)
    elif call.data == "note_list":
        user_tasks = get_user_tasks(call.message.chat.id)
    
        if not user_tasks:
            bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
            return
        
        tasks_text = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n"
        for task in user_tasks:
            status = "‚úÖ" if task["completed"] else "‚ùå"
            tasks_text += f"{task['id']}. {task['task']} {status}\n"
        
        
        bot.send_message(call.message.chat.id, tasks_text)
    elif call.data == "delete_note":
        user_tasks = get_user_tasks(call.message.chat.id)

        if not user_tasks:
            bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        
        markup = types.InlineKeyboardMarkup()
        for task in user_tasks:
            markup.add(types.InlineKeyboardButton(
                text=f"{task['id']}. {task['task']}",
                callback_data=f"delete_{task['id']}"
            ))
        
        bot.send_message(
            call.message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=markup
        )
    elif call.data.startswith("delete_"):
            task_id = int(call.data.split('_')[1])
            delete_user_task(call.message.chat.id, task_id)
            bot.send_message(call.message.chat.id, f"–ó–∞–¥–∞—á–∞ #{task_id} —É–¥–∞–ª–µ–Ω–∞.")
            # –£–¥–∞–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
            bot.edit_message_reply_markup(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=None
            )
    elif call.data == "complete_note":
             user_tasks = get_user_tasks(call.message.chat.id)


             incomplete_tasks = [task for task in user_tasks if not task["completed"]]
            
             if not incomplete_tasks:
                 bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
                 return
            
             markup = types.InlineKeyboardMarkup()
             for task in incomplete_tasks:
                 markup.add(types.InlineKeyboardButton(
                     text=f"{task['id']}. {task['task']}",
                     callback_data=f"complete_{task['id']}"
                 ))
            
             bot.send_message(
                 call.message.chat.id,
                 "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é:",
                 reply_markup=markup
             )
    elif call.data.startswith("complete_"):
         task_id = int(call.data.split('_')[1])
         update_user_task(call.message.chat.id, task_id, completed=True)
         bot.send_message(call.message.chat.id, f"–ó–∞–¥–∞—á–∞ #{task_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
         # –£–¥–∞–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
         bot.edit_message_reply_markup(
             chat_id=call.message.chat.id,
             message_id=call.message.message_id,
             reply_markup=None
         )





##########–§—É–Ω–∫—Ü–∏–∏

def get_first_operand(message):
    try:
        operand_1 = float(message.text)
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ:")
        bot.register_next_step_handler(msg, lambda message: get_second_operand(message, operand_1))
    except:
        msg = bot.send_message(message.chat.id, "–¶–∏—Ñ—Ä–∞–º–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")
        bot.register_next_step_handler(msg, get_first_operand)
    
def get_second_operand(message, operand_1):
    try:
        operand_2 = float(message.text)
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä( *, /, +, - ):")
        bot.register_next_step_handler(msg, lambda message: calculate_result(message, operand_1, operand_2))
    except:
        msg = bot.send_message(message.chat.id, "–¶–∏—Ñ—Ä–∞–º–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")
        bot.register_next_step_handler(msg, lambda m: get_second_operand(m, operand_1))

def calculate_result(message, operand_1, operand_2):
    operator = message.text
    try:
        if operator == "+":
            result = operand_1 + operand_2
        elif operator == "-":
            result = operand_1 - operand_2
        elif operator == "*":
            result = operand_1 * operand_2
        elif operator == "/":
            if operand_2 == 0:
                raise ZeroDivisionError
            result = operand_1 / operand_2  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å % –Ω–∞ /
        else:
            raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä")
        
        bot.send_message(message.chat.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        
    except ZeroDivisionError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!")
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ–ø–µ—Ä–∞–Ω–¥–æ–≤
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä (+, -, *, /):")
        bot.register_next_step_handler(msg, lambda m: calculate_result(m, operand_1, operand_2))
        
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ +, -, *, /")
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ–ø–µ—Ä–∞–Ω–¥–æ–≤
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä (+, -, *, /):")
        bot.register_next_step_handler(msg, lambda m: calculate_result(m, operand_1, operand_2))

#--------------------------------------------------------------#

def repeat(message):
    if message.content_type == 'text' and message.text.lower() == "—Å—Ç–æ–ø":
        choose_modules(message)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    if message.content_type == 'text':
        msg = bot.send_message(message.chat.id, message.text)
        bot.register_next_step_handler(msg, repeat)
    elif message.content_type == 'sticker':
        msg = bot.send_sticker(message.chat.id, message.sticker.file_id)
        bot.register_next_step_handler(msg, repeat)
    elif message.content_type == 'photo':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –∏–∑ –º–∞—Å—Å–∏–≤–∞
        msg = bot.send_photo(message.chat.id, message.photo[-1].file_id)
        bot.register_next_step_handler(msg, repeat)    
    elif message.content_type == 'animation':  # –ì–∏—Ñ–∫–∏
        msg = bot.send_animation(message.chat.id, message.animation.file_id)
        bot.register_next_step_handler(msg, repeat)
    elif message.content_type == 'video':
        msg = bot.send_video(message.chat.id, message.video.file_id)
        bot.register_next_step_handler(msg, repeat)
    elif message.content_type == 'voice':
        msg = bot.send_voice(message.chat.id, message.voice.file_id)
        bot.register_next_step_handler(msg, repeat)
    else:
        msg = bot.send_message(message.chat.id, "Nuh-uh‚òù")
        bot.register_next_step_handler(msg, repeat)

#--------------------------------------------------------------#

def story_maker(message):
    chat_id = message.chat.id
    if chat_id not in user_story_maker_data:
        return choose_modules(message)
    
    data = user_story_maker_data[chat_id]
    text = message.text
    
    if data["step"] == "name":
        data["name"] = text
        data["step"] = "place"
        msg = bot.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ! –ì–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–≤ –õ–æ–Ω–¥–æ–Ω–µ', '–Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ X')")
    
    elif data["step"] == "place":
        data["place"] = text
        data["step"] = "year"
        msg = bot.send_message(chat_id, "–í –∫–∞–∫–æ–º –≥–æ–¥—É? (–Ω–∞–ø—Ä–∏–º–µ—Ä: '2023')")
    
    elif data["step"] == "year":
        data["year"] = text
        data["step"] = "guest"
        msg = bot.send_message(chat_id, "–ö–æ–≥–æ –ø–æ—à—ë–ª(–∞) –ø—Ä–æ–≤–µ–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂? (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–¥—Ä—É–≥–∞', '–≤–æ–ª—à–µ–±–Ω–∏–∫–∞')")
    
    elif data["step"] == "guest":
        data["guest"] = text
        data["step"] = "event"
        msg = bot.send_message(chat_id, "–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ? –û–ø–∏—à–∏ —Å–æ–±—ã—Ç–∏–µ:")
    
    elif data["step"] == "event":
        story = (
            f"–í {data['year']} –≥–æ–¥—É {data['place']} –∂–∏–ª(–∞) {data['name']}. "
            f"–û–¥–Ω–∞–∂–¥—ã {data['name']} —Ä–µ—à–∏–ª(–∞) –Ω–∞–≤–µ—Å—Ç–∏—Ç—å {data['guest']}. "
            f"–ò –≤–æ—Ç —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å: {text}!"
        )
        bot.send_message(chat_id, f"üìñ –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è:\n\n{story}")
        del user_story_maker_data[chat_id]
        return choose_modules(message)
    
    bot.register_next_step_handler(msg, story_maker)

#--------------------------------------------------------------#

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as file:
            return json.load(file)
    return {}

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as file:
        json.dump(data, file, ensure_ascii=False, indent=4, separators=(',', ': '))

def get_user_tasks(chat_id):
    data = load_data()
    return data.get(str(chat_id), [])

def process_add_step(message): #–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –∏ –µ–≥–æ –ø–µ—Ä–µ–¥–∞—á–∞ –≤ add_user_task 
    try:
        if message.content_type == 'text':
            add_user_task(message.from_user.id, message.text)
            bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {message.text}")
        else:
            msg = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º")
            bot.register_next_step_handler(msg, process_add_step)
    except Exception as e:
        bot.reply_to(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")

def update_user_task(user_id, task_id, new_task=None, completed=None):
    data = load_data()
    user_tasks = data.get(str(user_id), [])
    
    for task in user_tasks:
        if task["id"] == task_id:
            if new_task is not None:
                task["task"] = new_task
            if completed is not None:
                task["completed"] = completed
            break
    
    save_data(data)

def add_user_task(user_id, task): 
    data = load_data()
    if str(user_id) not in data:
        data[str(user_id)] = []
    data[str(user_id)].append({"id": len(data[str(user_id)]) + 1, "task": task, "completed": False})
    save_data(data)





def complete_task(message):
    user_tasks = get_user_tasks(message.from_user.id)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    incomplete_tasks = [task for task in user_tasks if not task["completed"]]
    
    if not incomplete_tasks:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return
    
    markup = types.InlineKeyboardMarkup()
    for task in incomplete_tasks:
        markup.add(types.InlineKeyboardButton(
            text=f"{task['id']}. {task['task']}",
            callback_data=f"complete_{task['id']}"
        ))
    
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é:",
        reply_markup=markup
    )



def delete_user_task(user_id, task_id):
    data = load_data()
    user_tasks = data.get(str(user_id), [])
    if not any(task["id"] == task_id for task in user_tasks):
        return False  # –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º ID
    updated_tasks = []
    new_id = 1
    for task in user_tasks:
        if task["id"] != task_id:
            task["id"] = new_id
            updated_tasks.append(task)
            new_id += 1
    
    data[str(user_id)] = updated_tasks
    save_data(data)
    return True





bot.infinity_polling()