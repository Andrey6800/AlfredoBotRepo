import telebot
from telebot import types
from tokens import TELEGRAM_BOT_TOKEN 
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

user_story_maker_data = {}
@bot.message_handler(content_types=["text"])
def get_text_messages(message):
    if message.text.lower() == "/start":
        choose_modules(message)
    else:
        bot.send_message(message.chat.id, "–¢—ã —á—ë –Ω–µ—Å–µ—à—å –º–∞–±–æ–π, –Ω–∞–ø–∏—à–∏ '/start'")

def choose_modules(message):
        keyboard = types.InlineKeyboardMarkup() #–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –≤–∏–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏—Å–ø–ª—å–∑–æ–≤–∞—Ç—å
        calculator_button = types.InlineKeyboardButton(text='üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', callback_data='calculator') 
        keyboard.add(calculator_button) #–¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        repeater_button= types.InlineKeyboardButton(text='üîÅ –ü–æ–≤—Ç–æ—Ä—è–ª–∫–∞ —Ç–µ–∫—Å—Ç–∞', callback_data='repeater')
        keyboard.add(repeater_button)
        story_maker_button = types.InlineKeyboardButton(text='üìñ –°–æ—á–∏–Ω—è–ª–∫–∞ –∏—Å—Ç–æ—Ä–∏–π', callback_data='story_maker')
        keyboard.add(story_maker_button) 
        question = '–í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:'
        bot.send_message(message.from_user.id, text=question, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True) #–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
def callback_worker(call):
    if call.data == "calculator": 
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ:")
        bot.register_next_step_handler(msg, get_first_operand)
    elif call.data == "repeater":       
        bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏ '—Å—Ç–æ–ø' —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–∏–∫–ª")
        msg = bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏ —á—Ç–æ —Ç–µ–±–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å")
        bot.register_next_step_handler(msg, repeat)
    elif call.data == "story_maker":
        msg = bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
        bot.register_next_step_handler(msg, story_maker)
        user_story_maker_data[msg.chat.id] = {"step": "name"}


def story_maker(message):
    chat_id = message.chat.id
    if chat_id not in user_story_maker_data:
        return choose_modules(message)
    
    data = user_story_maker_data[chat_id]
    text = message.text
    
    if data["step"] == "name":
        data["name"] = text
        data["step"] = "place"
        msg = bot.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ! –ì–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–≤ –õ–æ–Ω–¥–æ–Ω–µ', '–Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ X')")
    
    elif data["step"] == "place":
        data["place"] = text
        data["step"] = "year"
        msg = bot.send_message(chat_id, "–í –∫–∞–∫–æ–º –≥–æ–¥—É? (–Ω–∞–ø—Ä–∏–º–µ—Ä: '2023', '–¥–∞–≤–Ω—ã–º-–¥–∞–≤–Ω–æ')")
    
    elif data["step"] == "year":
        data["year"] = text
        data["step"] = "guest"
        msg = bot.send_message(chat_id, "–ö –∫–æ–º—É –ø–æ—à—ë–ª(–∞) –≤ –≥–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂? (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–¥—Ä—É–≥–∞', '–≤–æ–ª—à–µ–±–Ω–∏–∫–∞')")
    
    elif data["step"] == "guest":
        data["guest"] = text
        data["step"] = "event"
        msg = bot.send_message(chat_id, "–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ? –û–ø–∏—à–∏ —Å–æ–±—ã—Ç–∏–µ:")
    
    elif data["step"] == "event":
        story = (
            f"–í {data['year']} –≥–æ–¥—É {data['place']} –∂–∏–ª(–∞) {data['name']}. "
            f"–û–¥–Ω–∞–∂–¥—ã {data['name']} —Ä–µ—à–∏–ª(–∞) –Ω–∞–≤–µ—Å—Ç–∏—Ç—å {data['guest']}. "
            f"–ò –≤–æ—Ç —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å: {text}!"
        )
        bot.send_message(chat_id, f"üìñ –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è:\n\n{story}")
        del user_story_maker_data[chat_id]
        return choose_modules(message)
    
    bot.register_next_step_handler(msg, story_maker)
    




def repeat(message):
    if message.text.lower() == "—Å—Ç–æ–ø":
        choose_modules(message)
        return
    else:
        msg = bot.send_message(message.chat.id, message.text)
        bot.register_next_step_handler(msg, repeat)



def get_first_operand(message):
    try:
        operand_1 = float(message.text)
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ:")
        bot.register_next_step_handler(msg, lambda message: get_second_operand(message, operand_1))
    except:
        msg = bot.send_message(message.chat.id, "–¶–∏—Ñ—Ä–∞–º–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")
        bot.register_next_step_handler(msg, get_first_operand)
    

def get_second_operand(message, operand_1):
    try:
        operand_2 = float(message.text)
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä( *, /, +, - ):")
        bot.register_next_step_handler(msg, lambda message: calculate_result(message, operand_1, operand_2))
    except:
        msg = bot.send_message(message.chat.id, "–¶–∏—Ñ—Ä–∞–º–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")
        bot.register_next_step_handler(msg, lambda m: get_second_operand(m, operand_1))

def calculate_result(message, operand_1, operand_2):
    operator = message.text
    try:
        if operator == "+":
            result = operand_1 + operand_2
        elif operator == "-":
            result = operand_1 - operand_2
        elif operator == "*":
            result = operand_1 * operand_2
        elif operator == "/":
            if operand_2 == 0:
                raise ZeroDivisionError
            result = operand_1 / operand_2  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å % –Ω–∞ /
        else:
            raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä")
        
        bot.send_message(message.chat.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
    except ZeroDivisionError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!")
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ–ø–µ—Ä–∞–Ω–¥–æ–≤
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä (+, -, *, /):")
        bot.register_next_step_handler(msg, lambda m: calculate_result(m, operand_1, operand_2))
        
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ +, -, *, /")
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ–ø–µ—Ä–∞–Ω–¥–æ–≤
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä (+, -, *, /):")
        bot.register_next_step_handler(msg, lambda m: calculate_result(m, operand_1, operand_2))


bot.infinity_polling()